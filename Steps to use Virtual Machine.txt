Steps to Use VM for Testing SwiftSaleApp
Install VirtualBox 7.1.8
Download VirtualBox 7.1.8 from virtualbox.org.

Run the installer as administrator (right-click > Run as administrator on Windows).

When prompted about the network reset (“Installing 7.1.8 networking feature will reset your network connection”), click Yes. Expect a brief disconnection (seconds to a minute).

Complete the installation.

Download a VM Image
For Windows: Download a Windows 11 VM from Microsoft Developer Website (choose VirtualBox format, .ova file).

For Linux: Download an Ubuntu VM from OSBoxes (select VirtualBox .ova file).

Save the .ova file to your host machine (e.g., C:\Users\lovei\Downloads).

Import the VM
Open VirtualBox.

Go to File > Import Appliance.

Select the downloaded .ova file and click Next.

Adjust settings if needed (e.g., allocate 4GB RAM, 2 CPU cores, 64GB disk) and click Import.

Wait for the import to complete (5-10 minutes).

Configure VM Networking
In VirtualBox, select the imported VM and click Settings > Network.

Set Adapter 1 to:
NAT for internet access (Stripe API, Render database).

Bridged Adapter for production-like testing (local Flask server, webhooks).

Ensure Enable Network Adapter is checked and click OK.

Transfer SwiftSaleApp Files
Copy your bundled swiftsaleapp.exe and prod.env (if not embedded in the .exe) to the VM:
Option 1: Shared Folder
In VirtualBox, go to VM Settings > Shared Folders.

Add a shared folder (e.g., C:\Users\lovei\SCD_SALES\swiftsaleapp).

In the VM, access the shared folder (Windows: via File Explorer; Ubuntu: /media/<user>/sf_<folder>).

Option 2: Drag-and-Drop
Enable drag-and-drop in VM Settings > General > Advanced > Drag and Drop > Bidirectional.

Drag swiftsaleapp.exe and prod.env to the VM’s desktop.

Place files in a directory (e.g., C:\SwiftSaleApp on Windows or /home/user/swiftsaleapp on Ubuntu).

Run and Test the .exe
In the VM, double-click swiftsaleapp.exe to launch.

Verify functionality:
GUI: Check Tkinter interface loads (e.g., “Developed By Michael St Pierre, ©2025”, “Avg Sell Rate” button).

Flask Server: Open a browser in the VM, visit http://localhost:5000 (or your port) to test routes (/, /success, /cancel).

Stripe: Test payment links (Bronze, Silver, Gold tiers) using Stripe test mode. Run stripe trigger customer.subscription.updated (if Stripe CLI is installed) to test webhook (we_1RTnPpJ7WrcpTNl626FKLmkq).

Database: Confirm PostgreSQL queries (via psycopg2) connect to your Render DATABASE_URL.

Logs: Check swiftsale.log in the .exe directory for errors (e.g., Telegram or Stripe issues).

Ensure no manual installs (Python, pip) are needed, confirming the click-to-run goal.

Handle prod.env
If prod.env is required (contains STRIPE_SECRET_KEY, DATABASE_URL, etc.):
Place it in the same directory as swiftsaleapp.exe.

Verify the app loads it (e.g., via dotenv.load_dotenv(os.path.join(os.path.dirname(sys.executable), 'prod.env'))).

If settings are embedded in the .exe, skip this step.

Test with production-like values in prod.env (match your Render setup).

Verify Network Post-Installation
After the VirtualBox network reset, confirm the VM has internet (e.g., ping google.com or open a browser).

If no connection, switch between NAT and Bridged Adapter in VM Settings > Network or restart the VM.

Troubleshoot Issues
.exe Fails: Check for missing files (e.g., static/styles.css, templates/index.html). Rebuild with PyInstaller:
bash

pyinstaller --onefile --add-data "prod.env;." --add-data "static;static" --add-data "templates;templates" main_dev.py

Network Issues: Ensure NAT or Bridged Adapter is active. Reinstall VirtualBox networking via the installer’s repair option.

Stripe/Database Errors: Verify prod.env settings match production (e.g., Render’s DATABASE_URL). Use ngrok for webhook testing if needed.

Check swiftsale.log for errors and compare with past issues (e.g., path errors, SSL mismatches).

Finalize Testing
Confirm the .exe runs without user downloads (no Python, pip, or dependency installs).

Test all features (GUI, Flask, Stripe, database) in the VM to match your Render production setup.

If successful, the .exe is ready for distribution.

Notes
Network Reset: Safe to accept; it enables VM networking for Stripe and Flask.

Clean VM: Use a fresh VM with no Python or dependencies to mimic a user’s machine.

prod.env: Include it with the .exe or embed settings if not already done.

If issues arise (e.g., .exe errors, network failures), share details (error messages, PyInstaller command), and I’ll provide fixes.

Let me know if you need specific tweaks (e.g., VM OS, Stripe webhook setup, or PyInstaller flags)!

